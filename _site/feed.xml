<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://kelmanchiang.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://kelmanchiang.github.io//" rel="alternate" type="text/html" /><updated>2021-03-06T22:56:08-08:00</updated><id>https://kelmanchiang.github.io//feed.xml</id><title type="html">Kelman Chiang</title><subtitle>Kelman Chiang</subtitle><author><name>Kelman Chiang</name></author><entry><title type="html">Running Index for SQL Queries</title><link href="https://kelmanchiang.github.io//2019/08/24/Running-Index-for-SQL-Queries/" rel="alternate" type="text/html" title="Running Index for SQL Queries" /><published>2019-08-24T00:00:00-07:00</published><updated>2019-08-24T00:00:00-07:00</updated><id>https://kelmanchiang.github.io//2019/08/24/Running-Index-for-SQL-Queries</id><content type="html" xml:base="https://kelmanchiang.github.io//2019/08/24/Running-Index-for-SQL-Queries/">&lt;p&gt;In my work at a micromobility startup, we have numerous ground assets at any given point of time, each being handled by users and operators. These assets could be either ready for hire, being moved around or is in the workshop.&lt;/p&gt;

&lt;p&gt;In tracking the performance of the business, it is natural to ask what is the performance of each/all the assets. Each minute the asset is spent in the workshop is each minute of revenue lost.&lt;/p&gt;

&lt;h3 id=&quot;challenge&quot;&gt;Challenge&lt;/h3&gt;
&lt;p&gt;In my case, the data is stored in a database as logs, with each record being a touchpoint made on an asset, and a classfication type of touchpoint made. All the assets are written in the same table. Within the constraints of SQL, I had to create a query on the database and link it directly in Tableau, creating a live feed of the assets.&lt;/p&gt;

&lt;p&gt;With this, I wanted to answer these questions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How long did an asset spend in a specific touchpoint type or a given touchpoint?&lt;/li&gt;
  &lt;li&gt;For each asset, how could I string together all its touchpoints?&lt;/li&gt;
  &lt;li&gt;What about the entire fleet of assets?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;solution&quot;&gt;Solution&lt;/h4&gt;
&lt;p&gt;Since the touchpoints are live and continuous, the database index wasn’t particularly helpful, and the timestamps and asset ID provided the order of touchpoints for a particular asset. I needed to generate a new index number for each record, from which further manipulation of the data can be done.&lt;/p&gt;

&lt;p&gt;In short, for each asset ID, I needed a running index based on the timestamp. 2 queries from the same dataset is needed, with 1 of queries having an index offset by 1. For example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asset_id | time  | type | index1
2        | 00:00 | A    | 1
2        | 01:01 | B    | 2
2        | 02:03 | A    | 3

asset_id | time  | type | index2
2        | 00:00 | A    | 0
2        | 01:01 | B    | 1
2        | 02:03 | A    | 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this a join on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asset_id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; will create something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asset_id | time1 | type1 | index1 | time2 | type2  | index2
2        | 00:00 | A     | 1      | 01:01 | B      | 1
2        | 01:01 | B     | 2      | 02:03 | A      | 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An existing solution to this is to use the built in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROW_NUMBER&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROWNUMBER&lt;/code&gt; functions in the database. Or a simple subquery like below, where the starting number and intervals can be set accordingly.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Kelman Chiang</name></author><summary type="html">In my work at a micromobility startup, we have numerous ground assets at any given point of time, each being handled by users and operators. These assets could be either ready for hire, being moved around or is in the workshop.</summary></entry><entry><title type="html">Multi-scale Hexagons</title><link href="https://kelmanchiang.github.io//2019/08/02/Multiscale-Hexagon-Shapefiles/" rel="alternate" type="text/html" title="Multi-scale Hexagons" /><published>2019-08-02T00:00:00-07:00</published><updated>2019-08-02T00:00:00-07:00</updated><id>https://kelmanchiang.github.io//2019/08/02/Multiscale-Hexagon-Shapefiles</id><content type="html" xml:base="https://kelmanchiang.github.io//2019/08/02/Multiscale-Hexagon-Shapefiles/">&lt;p&gt;&lt;a href=&quot;https://github.com/kelmanchiang/multiscale-hexagons&quot;&gt;https://github.com/kelmanchiang/multiscale-hexagons&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;challenge&quot;&gt;Challenge&lt;/h4&gt;
&lt;p&gt;Frustrated at existing open source solutions (&lt;a href=&quot;https://uber.github.io/h3/#/&quot;&gt;Uber’s H3&lt;/a&gt;, &lt;a href=&quot;http://s2geometry.io/&quot;&gt;Google’s S2&lt;/a&gt;), I decided to code out my own Python script to generate multi-scale, tessellating hexagons.&lt;/p&gt;

&lt;p&gt;I needed a simple shapefile of hexagons, that tesselate neatly along its vertices/edges, and in multiple sizes so that my scale of analyses could be drilled up or down as required.&lt;/p&gt;

&lt;p&gt;In my case, I wanted them in shapefiles so that I could load it into Tableau, QGIS and PostGIS databases as a base spatial dataset further analyses with other datasets.&lt;/p&gt;

&lt;h4 id=&quot;method&quot;&gt;Method&lt;/h4&gt;
&lt;p&gt;When I was writing the code, I didn’t foresee myself having to run this code frequently, and likely only needing to produce them for small areas, like cities. I chose a projected coordinate system, as I needed the units of the hexagon sizes to be understandable by the end user, and went for a UTM-based one so that it can be replicable worldwide.&lt;/p&gt;

&lt;h4 id=&quot;results&quot;&gt;Results&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;assets/multiscale_hexagons.png&quot; alt=&quot;Much Blue&quot; width=&quot;80%&quot; align=&quot;middle&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;limitations&quot;&gt;Limitations&lt;/h4&gt;
&lt;p&gt;Due to the choice of the projection coordinate system, distortion would occur if UTM zones are crossed. Larger hexagon sizes would suffer greater distortion.&lt;/p&gt;</content><author><name>Kelman Chiang</name></author><summary type="html">https://github.com/kelmanchiang/multiscale-hexagons</summary></entry><entry><title type="html">Mobile Geospatial Data Collection - ArcCollector</title><link href="https://kelmanchiang.github.io//2018/10/05/ArcGIS-Collector/" rel="alternate" type="text/html" title="Mobile Geospatial Data Collection - ArcCollector" /><published>2018-10-05T00:00:00-07:00</published><updated>2018-10-05T00:00:00-07:00</updated><id>https://kelmanchiang.github.io//2018/10/05/ArcGIS-Collector</id><content type="html" xml:base="https://kelmanchiang.github.io//2018/10/05/ArcGIS-Collector/">&lt;p&gt;In this post, I document my experience in building an ArcCollector setup within my organisation, discussing about my learning takeaways with the solution as well as designing the user journey.&lt;/p&gt;

&lt;h3 id=&quot;what-is-geospatial-data-collection&quot;&gt;What is &lt;em&gt;Geospatial&lt;/em&gt; Data Collection?&lt;/h3&gt;

&lt;p&gt;Some examples of manual, non-tech primary data collection methods are surveys, ground observations and photos. What makes geospatial data collection different is the capture of the geographic location, such as longitude &amp;amp; latitude, street/building name and postal codes. This allows for richer downstream geospatial analyses, alongside the traditional analytics.&lt;/p&gt;

&lt;h3 id=&quot;what-is-arcgis-collector&quot;&gt;What is ArcGIS Collector?&lt;/h3&gt;

&lt;p&gt;ArcGIS Collector (or ArcCollector for short) is a geospatial-enabled data collection mobile application. The workflow in ArcCollector is largely map-focused, where the user’s focus is centered on the map &amp;amp; location of the collected data.&lt;/p&gt;

&lt;p&gt;Another ArcGIS solution is Survey123, which is built off the XLSForm specification and has a survey form-like workflow. I personally prefer the Survey123 over Collector, as it allows for more customisation of the data collection process (e.g. smart form flows, custom buttons), but has weaker geospatial capabilities.&lt;/p&gt;

&lt;h3 id=&quot;overall-simplified-workflow&quot;&gt;Overall Simplified Workflow&lt;/h3&gt;

&lt;p&gt;I simplified the process of creating the solution into 5 steps:&lt;/p&gt;

&lt;h4 id=&quot;1-gather-the-user-requirements&quot;&gt;1. Gather the user requirements&lt;/h4&gt;

&lt;p&gt;Understanding the user requirements and application usage is very important, as it would shape the development and features the application would need. With the user journey, workflow and needs in mind, potential pitfalls can be identified. For example, if ArcCollector is suitable for the problem, or if there is a deeper issue at hand.&lt;/p&gt;

&lt;p&gt;Beyond verbal meetings or written reports, having the field experience how/where the application would eventually used can surface requirements that were previously not thought of. An idea of the workflow cycle/intervals or a continuity plan would be useful in determining how long the project would be.&lt;/p&gt;

&lt;h4 id=&quot;2-create-the-geodatabase&quot;&gt;2. Create the geodatabase&lt;/h4&gt;

&lt;p&gt;The user requirements are then translated into the technical setup, in both the geodatabase design and on ArcGIS Online. The geodatabase data schema design has an influence on the user flow, as well as the possible analytics downstream. I found myself iterating over this to perfect the app behaviours and eventual workflows. Using arcpy, I automated the geodatabase creation process, to allow for replicability, tweaks and maintenance.&lt;/p&gt;

&lt;p&gt;This was probably point where I felt that ArcCollector is rather restrictive, relative to Survey123. Creating a questionnaire/survey based off a geodatabase may not be the most elegant solution for certain workflows. However, ArcCollector proved to more effective when the workflow is heavy on geospatial requirements.&lt;/p&gt;

&lt;h4 id=&quot;3-setup-arcgis-portalonline--setup-arccollector&quot;&gt;3. Setup ArcGIS Portal/Online &amp;amp; setup ArcCollector&lt;/h4&gt;

&lt;p&gt;The settings in ArcGIS Portal/Online is more focused on the user access, appearance and interaction flows on the application, than the data per se. The UI/UX user requirements are translated here, into proper symbology, layers and tools that can be made available to the user. For example, having a symbology that is based on the user’s collected input.&lt;/p&gt;

&lt;p&gt;Because the ArcCollector mobile application has a mobile UI for the web map, I again found myself iterating numerous times on the desktop &amp;amp; mobile device to figure out the optimal configurations.&lt;/p&gt;

&lt;h4 id=&quot;4-operationalise--complete-the-workflow&quot;&gt;4. Operationalise &amp;amp; Complete the workflow&lt;/h4&gt;

&lt;p&gt;Of course, there has to be people using the application to collect data, which involves onboarding, application training and managing workflows. Creating user guides, engaging with users, conducting hands-on training sessions would be integral in getting the application well used and clean data being collected.&lt;/p&gt;

&lt;p&gt;At this juncture, it might be good to revisit step 1, to see if there are potential improvements for the application or even uncover what other workflows can tap on a similar solution.&lt;/p&gt;</content><author><name>Kelman Chiang</name></author><summary type="html">In this post, I document my experience in building an ArcCollector setup within my organisation, discussing about my learning takeaways with the solution as well as designing the user journey.</summary></entry></feed>